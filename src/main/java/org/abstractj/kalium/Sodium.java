/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 3.0.8
 *
 * Do not make changes to this file unless you know what you are doing--modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- */

package org.abstractj.kalium;

public class Sodium {
  public static int crypto_secretbox_keybytes() {
    return SodiumJNI.crypto_secretbox_keybytes();
  }

  public static int crypto_secretbox_noncebytes() {
    return SodiumJNI.crypto_secretbox_noncebytes();
  }

  public static int crypto_secretbox_macbytes() {
    return SodiumJNI.crypto_secretbox_macbytes();
  }

  public static int crypto_secretbox_zerobytes() {
    return SodiumJNI.crypto_secretbox_zerobytes();
  }

  public static int crypto_secretbox_boxzerobytes() {
    return SodiumJNI.crypto_secretbox_boxzerobytes();
  }

  public static String crypto_secretbox_primitive() {
    return SodiumJNI.crypto_secretbox_primitive();
  }

  public static int crypto_secretbox_easy(byte[] dst_cipher, byte[] src_plain, int plain_len, byte[] nonce, byte[] secret_key) {
    return SodiumJNI.crypto_secretbox_easy(dst_cipher, src_plain, plain_len, nonce, secret_key);
  }

  public static int crypto_secretbox_open_easy(byte[] dst_plain, byte[] src_cipher, int cipher_len, byte[] nonce, byte[] secret_key) {
    return SodiumJNI.crypto_secretbox_open_easy(dst_plain, src_cipher, cipher_len, nonce, secret_key);
  }

  public static int crypto_secretbox_detached(byte[] dst_cipher, byte[] mac, byte[] src_plain, int plain_len, byte[] nonce, byte[] secretkey) {
    return SodiumJNI.crypto_secretbox_detached(dst_cipher, mac, src_plain, plain_len, nonce, secretkey);
  }

  public static int crypto_secretbox_open_detached(byte[] dst_plain, byte[] src_cipher, byte[] mac, int cipher_len, byte[] nonce, byte[] secretkey) {
    return SodiumJNI.crypto_secretbox_open_detached(dst_plain, src_cipher, mac, cipher_len, nonce, secretkey);
  }

  public static int crypto_sign_bytes() {
    return SodiumJNI.crypto_sign_bytes();
  }

  public static int crypto_sign_seedbytes() {
    return SodiumJNI.crypto_sign_seedbytes();
  }

  public static int crypto_sign_publickeybytes() {
    return SodiumJNI.crypto_sign_publickeybytes();
  }

  public static int crypto_sign_secretkeybytes() {
    return SodiumJNI.crypto_sign_secretkeybytes();
  }

  public static String crypto_sign_primitive() {
    return SodiumJNI.crypto_sign_primitive();
  }

  public static int crypto_sign_keypair(byte[] dst_public_Key, byte[] dst_private_key) {
    return SodiumJNI.crypto_sign_keypair(dst_public_Key, dst_private_key);
  }

  public static int crypto_sign_seed_keypair(byte[] dst_public_Key, byte[] dst_private_key, byte[] src_seed) {
    return SodiumJNI.crypto_sign_seed_keypair(dst_public_Key, dst_private_key, src_seed);
  }

  public static int crypto_sign(byte[] dst_signed_msg, int[] signed_msg_len, byte[] src_msg, int msg_len, byte[] local_private_key) {
    return SodiumJNI.crypto_sign(dst_signed_msg, signed_msg_len, src_msg, msg_len, local_private_key);
  }

  public static int crypto_sign_open(byte[] dst_msg, int[] msg_len, byte[] src_signed_msg, int signed_msg_len, byte[] remote_public_key) {
    return SodiumJNI.crypto_sign_open(dst_msg, msg_len, src_signed_msg, signed_msg_len, remote_public_key);
  }

  public static int crypto_sign_detached(byte[] dst_signature, int[] signature_len, byte[] src_msg, int msg_len, byte[] local_private_key) {
    return SodiumJNI.crypto_sign_detached(dst_signature, signature_len, src_msg, msg_len, local_private_key);
  }

  public static int crypto_sign_verify_detached(byte[] src_signature, byte[] src_msg, int msg_len, byte[] remote_public_key) {
    return SodiumJNI.crypto_sign_verify_detached(src_signature, src_msg, msg_len, remote_public_key);
  }

  public static int crypto_sign_ed25519_sk_to_seed(byte[] dst_seed, byte[] src_private_key) {
    return SodiumJNI.crypto_sign_ed25519_sk_to_seed(dst_seed, src_private_key);
  }

  public static int crypto_sign_ed25519_sk_to_pk(byte[] dst_public_key, byte[] src_private_key) {
    return SodiumJNI.crypto_sign_ed25519_sk_to_pk(dst_public_key, src_private_key);
  }

  public static int crypto_sign_ed25519_bytes() {
    return SodiumJNI.crypto_sign_ed25519_bytes();
  }

  public static int crypto_sign_ed25519_seedbytes() {
    return SodiumJNI.crypto_sign_ed25519_seedbytes();
  }

  public static int crypto_sign_ed25519_publickeybytes() {
    return SodiumJNI.crypto_sign_ed25519_publickeybytes();
  }

  public static int crypto_sign_ed25519_secretkeybytes() {
    return SodiumJNI.crypto_sign_ed25519_secretkeybytes();
  }

  public static int crypto_sign_ed25519(byte[] sm, int[] smlen_p, byte[] m, int mlen, byte[] sk) {
    return SodiumJNI.crypto_sign_ed25519(sm, smlen_p, m, mlen, sk);
  }

  public static int crypto_sign_ed25519_open(byte[] m, int[] mlen_p, byte[] sm, int smlen, byte[] pk) {
    return SodiumJNI.crypto_sign_ed25519_open(m, mlen_p, sm, smlen, pk);
  }

  public static int crypto_sign_ed25519_detached(byte[] sig, int[] siglen_p, byte[] m, int mlen, byte[] sk) {
    return SodiumJNI.crypto_sign_ed25519_detached(sig, siglen_p, m, mlen, sk);
  }

  public static int crypto_sign_ed25519_verify_detached(byte[] sig, byte[] m, int mlen, byte[] pk) {
    return SodiumJNI.crypto_sign_ed25519_verify_detached(sig, m, mlen, pk);
  }

  public static int crypto_sign_ed25519_keypair(byte[] pk, byte[] sk) {
    return SodiumJNI.crypto_sign_ed25519_keypair(pk, sk);
  }

  public static int crypto_sign_ed25519_seed_keypair(byte[] pk, byte[] sk, byte[] seed) {
    return SodiumJNI.crypto_sign_ed25519_seed_keypair(pk, sk, seed);
  }

  public static int crypto_sign_ed25519_pk_to_curve25519(byte[] curve25519_pk, byte[] ed25519_pk) {
    return SodiumJNI.crypto_sign_ed25519_pk_to_curve25519(curve25519_pk, ed25519_pk);
  }

  public static int crypto_sign_ed25519_sk_to_curve25519(byte[] curve25519_sk, byte[] ed25519_sk) {
    return SodiumJNI.crypto_sign_ed25519_sk_to_curve25519(curve25519_sk, ed25519_sk);
  }
}
