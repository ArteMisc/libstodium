/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 2.0.10
 *
 * Do not make changes to this file unless you know what you are doing--modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- */

package org.abstractj.kalium;

public class Sodium {
  public static int sodium_init() {
    return SodiumJNI.sodium_init();
  }

  public static String sodium_version_string() {
    return SodiumJNI.sodium_version_string();
  }

  public static void randombytes(byte[] dst_buf, int buf_len) {
    SodiumJNI.randombytes(dst_buf, buf_len);
  }

  public static void randombytes_buf(byte[] buff, int buff_len) {
    SodiumJNI.randombytes_buf(buff, buff_len);
  }

  public static int randombytes_close() {
    return SodiumJNI.randombytes_close();
  }

  public static void randombytes_stir() {
    SodiumJNI.randombytes_stir();
  }

  public static int sodium_memcmp(SWIGTYPE_p_void b1_, SWIGTYPE_p_void b2_, int len) {
    return SodiumJNI.sodium_memcmp(SWIGTYPE_p_void.getCPtr(b1_), SWIGTYPE_p_void.getCPtr(b2_), len);
  }

  public static void sodium_increment(byte[] src_dst_number, int number_len) {
    SodiumJNI.sodium_increment(src_dst_number, number_len);
  }

  public static int crypto_secretbox_easy(byte[] dst_cipher, byte[] src_plain, int plain_len, byte[] nonce, byte[] secret_key) {
    return SodiumJNI.crypto_secretbox_easy(dst_cipher, src_plain, plain_len, nonce, secret_key);
  }

  public static int crypto_secretbox_open_easy(byte[] dst_plain, byte[] src_cipher, int cipher_len, byte[] nonce, byte[] secret_key) {
    return SodiumJNI.crypto_secretbox_open_easy(dst_plain, src_cipher, cipher_len, nonce, secret_key);
  }

  public static int crypto_secretbox_detached(byte[] dst_cipher, byte[] mac, byte[] src_plain, int plain_len, byte[] nonce, byte[] secretkey) {
    return SodiumJNI.crypto_secretbox_detached(dst_cipher, mac, src_plain, plain_len, nonce, secretkey);
  }

  public static int crypto_secretbox_open_detached(byte[] dst_plain, byte[] src_cipher, byte[] mac, int cipher_len, byte[] nonce, byte[] secretkey) {
    return SodiumJNI.crypto_secretbox_open_detached(dst_plain, src_cipher, mac, cipher_len, nonce, secretkey);
  }

  public static int crypto_box_keypair(byte[] dst_public_Key, byte[] dst_private_key) {
    return SodiumJNI.crypto_box_keypair(dst_public_Key, dst_private_key);
  }

  public static int crypto_box_seed_keypair(byte[] dst_public_key, byte[] dst_private_key, byte[] src_seed) {
    return SodiumJNI.crypto_box_seed_keypair(dst_public_key, dst_private_key, src_seed);
  }

  public static int crypto_scalarmult_base(byte[] dst_group_element, byte[] src_n_multiplier) {
    return SodiumJNI.crypto_scalarmult_base(dst_group_element, src_n_multiplier);
  }

  public static int crypto_box_easy(byte[] dst_cipher, byte[] src_plain, int plain_len, byte[] nonce, byte[] remote_public_key, byte[] local_private_key) {
    return SodiumJNI.crypto_box_easy(dst_cipher, src_plain, plain_len, nonce, remote_public_key, local_private_key);
  }

  public static int crypto_box_open_easy(byte[] dst_plain, byte[] src_cipher, int cipher_len, byte[] nonce, byte[] remote_public_key, byte[] local_private_key) {
    return SodiumJNI.crypto_box_open_easy(dst_plain, src_cipher, cipher_len, nonce, remote_public_key, local_private_key);
  }

  public static int crypto_box_detached(byte[] dst_cipher, byte[] dst_mac, byte[] src_plain, int plain_len, byte[] nonces, byte[] remote_public_key, byte[] local_private_key) {
    return SodiumJNI.crypto_box_detached(dst_cipher, dst_mac, src_plain, plain_len, nonces, remote_public_key, local_private_key);
  }

  public static int crypto_box_open_detached(byte[] dst_plain, byte[] src_cipher, byte[] src_mac, int cipher_len, byte[] nonce, byte[] remote_public_key, byte[] local_private_key) {
    return SodiumJNI.crypto_box_open_detached(dst_plain, src_cipher, src_mac, cipher_len, nonce, remote_public_key, local_private_key);
  }

  public static int crypto_box_beforenm(byte[] dst_shared_key, byte[] remote_public_key, byte[] local_private_key) {
    return SodiumJNI.crypto_box_beforenm(dst_shared_key, remote_public_key, local_private_key);
  }

  public static int crypto_box_easy_afternm(byte[] dst_cipher, byte[] src_plain, int plain_len, byte[] nonce, byte[] shared_key) {
    return SodiumJNI.crypto_box_easy_afternm(dst_cipher, src_plain, plain_len, nonce, shared_key);
  }

  public static int crypto_box_open_easy_afternm(byte[] dst_plain, byte[] src_cipher, int cipher_len, byte[] nonce, byte[] shared_key) {
    return SodiumJNI.crypto_box_open_easy_afternm(dst_plain, src_cipher, cipher_len, nonce, shared_key);
  }

  public static int crypto_box_detached_afternm(byte[] dst_cipher, byte[] dst_mac, byte[] src_plain, int plain_len, byte[] nonce, byte[] shared_key) {
    return SodiumJNI.crypto_box_detached_afternm(dst_cipher, dst_mac, src_plain, plain_len, nonce, shared_key);
  }

  public static int crypto_box_open_detached_afternm(byte[] dst_plain, byte[] src_cipher, byte[] src_mac, int cipher_len, byte[] nonce, byte[] shared_key) {
    return SodiumJNI.crypto_box_open_detached_afternm(dst_plain, src_cipher, src_mac, cipher_len, nonce, shared_key);
  }

  public static int crypto_box_seal(byte[] dst_cipher, byte[] src_plain, int plain_len, byte[] remote_public_key) {
    return SodiumJNI.crypto_box_seal(dst_cipher, src_plain, plain_len, remote_public_key);
  }

  public static int crypto_box_seal_open(byte[] dst_plain, byte[] src_cipher, int cipher_len, byte[] local_public_key, byte[] local_private_key) {
    return SodiumJNI.crypto_box_seal_open(dst_plain, src_cipher, cipher_len, local_public_key, local_private_key);
  }

  public static int crypto_sign_keypair(byte[] dst_public_Key, byte[] dst_private_key) {
    return SodiumJNI.crypto_sign_keypair(dst_public_Key, dst_private_key);
  }

  public static int crypto_sign_seed_keypair(byte[] dst_public_Key, byte[] dst_private_key, byte[] src_seed) {
    return SodiumJNI.crypto_sign_seed_keypair(dst_public_Key, dst_private_key, src_seed);
  }

  public static int crypto_sign(byte[] dst_signed_msg, int[] signed_msg_len, byte[] src_msg, int msg_len, byte[] local_private_key) {
    return SodiumJNI.crypto_sign(dst_signed_msg, signed_msg_len, src_msg, msg_len, local_private_key);
  }

  public static int crypto_sign_open(byte[] dst_msg, int[] msg_len, byte[] src_signed_msg, int signed_msg_len, byte[] remote_public_key) {
    return SodiumJNI.crypto_sign_open(dst_msg, msg_len, src_signed_msg, signed_msg_len, remote_public_key);
  }

  public static int crypto_sign_detached(byte[] dst_signature, int[] signature_len, byte[] src_msg, int msg_len, byte[] local_private_key) {
    return SodiumJNI.crypto_sign_detached(dst_signature, signature_len, src_msg, msg_len, local_private_key);
  }

  public static int crypto_sign_verify_detached(byte[] src_signature, byte[] src_msg, int msg_len, byte[] remote_public_key) {
    return SodiumJNI.crypto_sign_verify_detached(src_signature, src_msg, msg_len, remote_public_key);
  }

  public static int crypto_sign_ed25519_sk_to_seed(byte[] dst_seed, byte[] src_private_key) {
    return SodiumJNI.crypto_sign_ed25519_sk_to_seed(dst_seed, src_private_key);
  }

  public static int crypto_sign_ed25519_sk_to_pk(byte[] dst_public_key, byte[] src_private_key) {
    return SodiumJNI.crypto_sign_ed25519_sk_to_pk(dst_public_key, src_private_key);
  }

  public static int crypto_generichash(byte[] dst_hash, int dst_len, byte[] src_input, int input_len, byte[] src_key, int key_len) {
    return SodiumJNI.crypto_generichash(dst_hash, dst_len, src_input, input_len, src_key, key_len);
  }

  public static int crypto_aead_chacha20poly1305_encrypt(byte[] c, int[] clen, byte[] m, int mlen, byte[] ad, int adlen, byte[] nsec, byte[] npub, byte[] k) {
    return SodiumJNI.crypto_aead_chacha20poly1305_encrypt(c, clen, m, mlen, ad, adlen, nsec, npub, k);
  }

  public static int crypto_aead_chacha20poly1305_decrypt(byte[] m, int[] mlen, byte[] nsec, byte[] c, int clen, byte[] ad, int adlen, byte[] npub, byte[] k) {
    return SodiumJNI.crypto_aead_chacha20poly1305_decrypt(m, mlen, nsec, c, clen, ad, adlen, npub, k);
  }

  public static int crypto_hash_sha256(byte[] out, byte[] in, int inlen) {
    return SodiumJNI.crypto_hash_sha256(out, in, inlen);
  }

  public static int crypto_hash_sha512(byte[] out, byte[] in, int inlen) {
    return SodiumJNI.crypto_hash_sha512(out, in, inlen);
  }

  public static int crypto_generichash_blake2b(byte[] out, int outlen, byte[] in, int inlen, byte[] key, int keylen) {
    return SodiumJNI.crypto_generichash_blake2b(out, outlen, in, inlen, key, keylen);
  }

  public static int crypto_pwhash_scryptsalsa208sha256(byte[] out, int outlen, String passwd, int passwdlen, byte[] salt, int opslimit, int memlimit) {
    return SodiumJNI.crypto_pwhash_scryptsalsa208sha256(out, outlen, passwd, passwdlen, salt, opslimit, memlimit);
  }

  public static int crypto_box_curve25519xsalsa20poly1305_keypair(byte[] pk, byte[] sk) {
    return SodiumJNI.crypto_box_curve25519xsalsa20poly1305_keypair(pk, sk);
  }

  public static int crypto_box_curve25519xsalsa20poly1305_seed_keypair(byte[] pk, byte[] sk, byte[] seed) {
    return SodiumJNI.crypto_box_curve25519xsalsa20poly1305_seed_keypair(pk, sk, seed);
  }

  public static int crypto_box_curve25519xsalsa20poly1305(byte[] c, byte[] m, int mlen, byte[] n, byte[] pk, byte[] sk) {
    return SodiumJNI.crypto_box_curve25519xsalsa20poly1305(c, m, mlen, n, pk, sk);
  }

  public static int crypto_box_curve25519xsalsa20poly1305_open(byte[] m, byte[] c, int clen, byte[] n, byte[] pk, byte[] sk) {
    return SodiumJNI.crypto_box_curve25519xsalsa20poly1305_open(m, c, clen, n, pk, sk);
  }

  public static int crypto_scalarmult_curve25519(byte[] q, byte[] n, byte[] p) {
    return SodiumJNI.crypto_scalarmult_curve25519(q, n, p);
  }

  public static int crypto_secretbox_xsalsa20poly1305(byte[] c, byte[] m, int mlen, byte[] n, byte[] k) {
    return SodiumJNI.crypto_secretbox_xsalsa20poly1305(c, m, mlen, n, k);
  }

  public static int crypto_secretbox_xsalsa20poly1305_open(byte[] m, byte[] c, int clen, byte[] n, byte[] k) {
    return SodiumJNI.crypto_secretbox_xsalsa20poly1305_open(m, c, clen, n, k);
  }

  public static int crypto_sign_ed25519_seed_keypair(byte[] pk, byte[] sk, byte[] seed) {
    return SodiumJNI.crypto_sign_ed25519_seed_keypair(pk, sk, seed);
  }

  public static int crypto_sign_ed25519(byte[] sm, int[] smlen, byte[] m, int mlen, byte[] sk) {
    return SodiumJNI.crypto_sign_ed25519(sm, smlen, m, mlen, sk);
  }

  public static int crypto_sign_ed25519_open(byte[] m, int[] mlen, byte[] sm, int smlen, byte[] pk) {
    return SodiumJNI.crypto_sign_ed25519_open(m, mlen, sm, smlen, pk);
  }

  public static int crypto_stream_xsalsa20(byte[] c, int clen, byte[] n, byte[] k) {
    return SodiumJNI.crypto_stream_xsalsa20(c, clen, n, k);
  }

  public static int crypto_stream_xsalsa20_xor(byte[] c, byte[] m, int mlen, byte[] n, byte[] k) {
    return SodiumJNI.crypto_stream_xsalsa20_xor(c, m, mlen, n, k);
  }

  public static int crypto_core_hsalsa20(byte[] out, byte[] in, byte[] k, byte[] c) {
    return SodiumJNI.crypto_core_hsalsa20(out, in, k, c);
  }

}
