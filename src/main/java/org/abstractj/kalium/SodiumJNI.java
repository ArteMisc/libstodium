/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 2.0.10
 *
 * Do not make changes to this file unless you know what you are doing--modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- */

package org.abstractj.kalium;

public class SodiumJNI {
  public final static native int sodium_init();
  public final static native byte[] sodium_version_string();
  public final static native void randombytes(byte[] jarg1, int jarg2);
  public final static native void randombytes_buf(byte[] jarg1, int jarg2);
  public final static native int randombytes_close();
  public final static native void randombytes_stir();
  public final static native void sodium_increment(byte[] jarg1, int jarg2);
  public final static native int crypto_secretbox_easy(byte[] jarg1, byte[] jarg2, int jarg3, byte[] jarg4, byte[] jarg5);
  public final static native int crypto_secretbox_open_easy(byte[] jarg1, byte[] jarg2, int jarg3, byte[] jarg4, byte[] jarg5);
  public final static native int crypto_secretbox_detached(byte[] jarg1, byte[] jarg2, byte[] jarg3, int jarg4, byte[] jarg5, byte[] jarg6);
  public final static native int crypto_secretbox_open_detached(byte[] jarg1, byte[] jarg2, byte[] jarg3, int jarg4, byte[] jarg5, byte[] jarg6);
  public final static native int crypto_box_keypair(byte[] jarg1, byte[] jarg2);
  public final static native int crypto_box_seed_keypair(byte[] jarg1, byte[] jarg2, byte[] jarg3);
  public final static native int crypto_scalarmult_base(byte[] jarg1, byte[] jarg2);
  public final static native int crypto_box_easy(byte[] jarg1, byte[] jarg2, int jarg3, byte[] jarg4, byte[] jarg5, byte[] jarg6);
  public final static native int crypto_box_open_easy(byte[] jarg1, byte[] jarg2, int jarg3, byte[] jarg4, byte[] jarg5, byte[] jarg6);
  public final static native int crypto_box_detached(byte[] jarg1, byte[] jarg2, byte[] jarg3, int jarg4, byte[] jarg5, byte[] jarg6, byte[] jarg7);
  public final static native int crypto_box_open_detached(byte[] jarg1, byte[] jarg2, byte[] jarg3, int jarg4, byte[] jarg5, byte[] jarg6, byte[] jarg7);
  public final static native int crypto_box_beforenm(byte[] jarg1, byte[] jarg2, byte[] jarg3);
  public final static native int crypto_box_easy_afternm(byte[] jarg1, byte[] jarg2, int jarg3, byte[] jarg4, byte[] jarg5);
  public final static native int crypto_box_open_easy_afternm(byte[] jarg1, byte[] jarg2, int jarg3, byte[] jarg4, byte[] jarg5);
  public final static native int crypto_box_detached_afternm(byte[] jarg1, byte[] jarg2, byte[] jarg3, int jarg4, byte[] jarg5, byte[] jarg6);
  public final static native int crypto_box_open_detached_afternm(byte[] jarg1, byte[] jarg2, byte[] jarg3, int jarg4, byte[] jarg5, byte[] jarg6);
  public final static native int crypto_box_seal(byte[] jarg1, byte[] jarg2, int jarg3, byte[] jarg4);
  public final static native int crypto_box_seal_open(byte[] jarg1, byte[] jarg2, int jarg3, byte[] jarg4, byte[] jarg5);
  public final static native int crypto_sign_keypair(byte[] jarg1, byte[] jarg2);
  public final static native int crypto_sign_seed_keypair(byte[] jarg1, byte[] jarg2, byte[] jarg3);
  public final static native int crypto_sign(byte[] jarg1, int[] jarg2, byte[] jarg3, int jarg4, byte[] jarg5);
  public final static native int crypto_sign_open(byte[] jarg1, int[] jarg2, byte[] jarg3, int jarg4, byte[] jarg5);
  public final static native int crypto_sign_detached(byte[] jarg1, int[] jarg2, byte[] jarg3, int jarg4, byte[] jarg5);
  public final static native int crypto_sign_verify_detached(byte[] jarg1, byte[] jarg2, int jarg3, byte[] jarg4);
  public final static native int crypto_sign_ed25519_sk_to_seed(byte[] jarg1, byte[] jarg2);
  public final static native int crypto_sign_ed25519_sk_to_pk(byte[] jarg1, byte[] jarg2);
  public final static native int crypto_generichash(byte[] jarg1, int jarg2, byte[] jarg3, int jarg4, byte[] jarg5, int jarg6);
  public final static native int crypto_shorthash(byte[] jarg1, byte[] jarg2, int jarg3, byte[] jarg4);
  public final static native int crypto_auth(byte[] jarg1, byte[] jarg2, int jarg3, byte[] jarg4);
  public final static native int crypto_auth_verify(byte[] jarg1, byte[] jarg2, int jarg3, byte[] jarg4);
  public final static native int crypto_onetimeauth(byte[] jarg1, byte[] jarg2, int jarg3, byte[] jarg4);
  public final static native int crypto_onetimeauth_verify(byte[] jarg1, byte[] jarg2, int jarg3, byte[] jarg4);
  public final static native void crypto_generichash_state_h_set(long jarg1, crypto_generichash_state jarg1_, long jarg2);
  public final static native long crypto_generichash_state_h_get(long jarg1, crypto_generichash_state jarg1_);
  public final static native void crypto_generichash_state_t_set(long jarg1, crypto_generichash_state jarg1_, long jarg2);
  public final static native long crypto_generichash_state_t_get(long jarg1, crypto_generichash_state jarg1_);
  public final static native void crypto_generichash_state_f_set(long jarg1, crypto_generichash_state jarg1_, long jarg2);
  public final static native long crypto_generichash_state_f_get(long jarg1, crypto_generichash_state jarg1_);
  public final static native void crypto_generichash_state_buf_set(long jarg1, crypto_generichash_state jarg1_, short[] jarg2);
  public final static native short[] crypto_generichash_state_buf_get(long jarg1, crypto_generichash_state jarg1_);
  public final static native void crypto_generichash_state_buflen_set(long jarg1, crypto_generichash_state jarg1_, int jarg2);
  public final static native int crypto_generichash_state_buflen_get(long jarg1, crypto_generichash_state jarg1_);
  public final static native void crypto_generichash_state_last_node_set(long jarg1, crypto_generichash_state jarg1_, short jarg2);
  public final static native short crypto_generichash_state_last_node_get(long jarg1, crypto_generichash_state jarg1_);
  public final static native long new_crypto_generichash_state();
  public final static native void delete_crypto_generichash_state(long jarg1);
  public final static native int crypto_generichash_init(long jarg1, crypto_generichash_state jarg1_, byte[] jarg2, int jarg3, int jarg4);
  public final static native int crypto_generichash_update(long jarg1, crypto_generichash_state jarg1_, byte[] jarg2, int jarg3);
  public final static native int crypto_generichash_final(long jarg1, crypto_generichash_state jarg1_, byte[] jarg2, int jarg3);
  public final static native int crypto_pwhash_scryptsalsa208sha256(byte[] jarg1, int jarg2, byte[] jarg3, int jarg4, byte[] jarg5, int jarg6, int jarg7);
  public final static native int crypto_aead_chacha20poly1305_encrypt(byte[] jarg1, int[] jarg2, byte[] jarg3, int jarg4, byte[] jarg5, int jarg6, byte[] jarg7, byte[] jarg8, byte[] jarg9);
  public final static native int crypto_aead_chacha20poly1305_decrypt(byte[] jarg1, int[] jarg2, byte[] jarg3, byte[] jarg4, int jarg5, byte[] jarg6, int jarg7, byte[] jarg8, byte[] jarg9);
  public final static native int crypto_hash_sha256(byte[] jarg1, byte[] jarg2, int jarg3);
  public final static native int crypto_hash_sha512(byte[] jarg1, byte[] jarg2, int jarg3);
  public final static native int crypto_generichash_blake2b(byte[] jarg1, int jarg2, byte[] jarg3, int jarg4, byte[] jarg5, int jarg6);
  public final static native int crypto_box_curve25519xsalsa20poly1305_keypair(byte[] jarg1, byte[] jarg2);
  public final static native int crypto_box_curve25519xsalsa20poly1305_seed_keypair(byte[] jarg1, byte[] jarg2, byte[] jarg3);
  public final static native int crypto_box_curve25519xsalsa20poly1305(byte[] jarg1, byte[] jarg2, int jarg3, byte[] jarg4, byte[] jarg5, byte[] jarg6);
  public final static native int crypto_box_curve25519xsalsa20poly1305_open(byte[] jarg1, byte[] jarg2, int jarg3, byte[] jarg4, byte[] jarg5, byte[] jarg6);
  public final static native int crypto_scalarmult_curve25519(byte[] jarg1, byte[] jarg2, byte[] jarg3);
  public final static native int crypto_secretbox_xsalsa20poly1305(byte[] jarg1, byte[] jarg2, int jarg3, byte[] jarg4, byte[] jarg5);
  public final static native int crypto_secretbox_xsalsa20poly1305_open(byte[] jarg1, byte[] jarg2, int jarg3, byte[] jarg4, byte[] jarg5);
  public final static native int crypto_sign_ed25519_seed_keypair(byte[] jarg1, byte[] jarg2, byte[] jarg3);
  public final static native int crypto_sign_ed25519(byte[] jarg1, int[] jarg2, byte[] jarg3, int jarg4, byte[] jarg5);
  public final static native int crypto_sign_ed25519_open(byte[] jarg1, int[] jarg2, byte[] jarg3, int jarg4, byte[] jarg5);
  public final static native int crypto_stream_xsalsa20(byte[] jarg1, int jarg2, byte[] jarg3, byte[] jarg4);
  public final static native int crypto_stream_xsalsa20_xor(byte[] jarg1, byte[] jarg2, int jarg3, byte[] jarg4, byte[] jarg5);
  public final static native int crypto_core_hsalsa20(byte[] jarg1, byte[] jarg2, byte[] jarg3, byte[] jarg4);
}
