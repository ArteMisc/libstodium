/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 3.0.8
 *
 * Do not make changes to this file unless you know what you are doing--modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- */

package org.abstractj.kalium;

public class SodiumJNI {
  public final static native int crypto_secretbox_keybytes();
  public final static native int crypto_secretbox_noncebytes();
  public final static native int crypto_secretbox_macbytes();
  public final static native int crypto_secretbox_zerobytes();
  public final static native int crypto_secretbox_boxzerobytes();
  public final static native String crypto_secretbox_primitive();
  public final static native int crypto_secretbox_easy(byte[] jarg1, byte[] jarg2, int jarg3, byte[] jarg4, byte[] jarg5);
  public final static native int crypto_secretbox_open_easy(byte[] jarg1, byte[] jarg2, int jarg3, byte[] jarg4, byte[] jarg5);
  public final static native int crypto_secretbox_detached(byte[] jarg1, byte[] jarg2, byte[] jarg3, int jarg4, byte[] jarg5, byte[] jarg6);
  public final static native int crypto_secretbox_open_detached(byte[] jarg1, byte[] jarg2, byte[] jarg3, int jarg4, byte[] jarg5, byte[] jarg6);
  public final static native int crypto_sign_bytes();
  public final static native int crypto_sign_seedbytes();
  public final static native int crypto_sign_publickeybytes();
  public final static native int crypto_sign_secretkeybytes();
  public final static native String crypto_sign_primitive();
  public final static native int crypto_sign_keypair(byte[] jarg1, byte[] jarg2);
  public final static native int crypto_sign_seed_keypair(byte[] jarg1, byte[] jarg2, byte[] jarg3);
  public final static native int crypto_sign(byte[] jarg1, int[] jarg2, byte[] jarg3, int jarg4, byte[] jarg5);
  public final static native int crypto_sign_open(byte[] jarg1, int[] jarg2, byte[] jarg3, int jarg4, byte[] jarg5);
  public final static native int crypto_sign_detached(byte[] jarg1, int[] jarg2, byte[] jarg3, int jarg4, byte[] jarg5);
  public final static native int crypto_sign_verify_detached(byte[] jarg1, byte[] jarg2, int jarg3, byte[] jarg4);
  public final static native int crypto_sign_ed25519_sk_to_seed(byte[] jarg1, byte[] jarg2);
  public final static native int crypto_sign_ed25519_sk_to_pk(byte[] jarg1, byte[] jarg2);
  public final static native int crypto_sign_ed25519_bytes();
  public final static native int crypto_sign_ed25519_seedbytes();
  public final static native int crypto_sign_ed25519_publickeybytes();
  public final static native int crypto_sign_ed25519_secretkeybytes();
  public final static native int crypto_sign_ed25519(byte[] jarg1, int[] jarg2, byte[] jarg3, int jarg4, byte[] jarg5);
  public final static native int crypto_sign_ed25519_open(byte[] jarg1, int[] jarg2, byte[] jarg3, int jarg4, byte[] jarg5);
  public final static native int crypto_sign_ed25519_detached(byte[] jarg1, int[] jarg2, byte[] jarg3, int jarg4, byte[] jarg5);
  public final static native int crypto_sign_ed25519_verify_detached(byte[] jarg1, byte[] jarg2, int jarg3, byte[] jarg4);
  public final static native int crypto_sign_ed25519_keypair(byte[] jarg1, byte[] jarg2);
  public final static native int crypto_sign_ed25519_seed_keypair(byte[] jarg1, byte[] jarg2, byte[] jarg3);
  public final static native int crypto_sign_ed25519_pk_to_curve25519(byte[] jarg1, byte[] jarg2);
  public final static native int crypto_sign_ed25519_sk_to_curve25519(byte[] jarg1, byte[] jarg2);
}
